c
valid?(payload)
c
valid?(payload)
c
n
valid?(payload)
c
n
payload
error_message(validation_result.errors.messages.map(&:to_h)) unless valid?(payload)
c
valid?(payload[:ad])
exit
payload[:ad]
payload
payload.ad
valid?(payload)
c
Ad.last
Ad.all
c
n
c
n
Ads::CreateService.new(payload).call
c
payload
Ads::CreateService.new(payload).call
c
Ads::CreateService.new
Ads::CreateService.new(payload).call
c
payload[:ad].symbolize_keys.slice(:title,:description,:city, :user_id)
p<ylo<d[:ad].symbolize_keys.slice(:title,:description,:city, :user_id)
payload
c
Ads::CreateService
CreateService
BasicService
c
payload.ad
AdSerializer.new(payload.ad)
payload
Ad.new(payload)
error_message(validation_result.errors.messages.map(&:to_h)) unless valid?(payload)
c
error_message(validation_result.errors.messages.map(&:to_h)) unless valid?(payload)
c
payload
c
payload
c
JSON.parse(request.body.read, symbolize_names: true)
c
JSON.parse request.body.read
request.body.rewind
c
JSON.parse request.body.read
request.body.rewind
request
request.body
request.body.read
c
request.body.read
JSON.parse(request.body.read, symbolize_names: true)
c
JSON.parse(request.body.read, symbolize_names: true)
request.body.read
request.body
c
request.body
request.body.read
JSON.parse(request.body.read, symbolize_names: true)
JSON.parse(request.body.read).symbolize_keys
JSON.parse(request.body.read)
c
JSON.parse(request.body.read)
request.body.read
c
request.body.read
JSON.parse(request.body.read)
JSON.parse(request.body.read).symbolize_keys
JSON.parse(request.body.read, symbolize_names: true)
JSON.parse(request.body.read)
request.body.read
request.body
request
params
messages
c
Ad.create(title: 'test3', description: 'desc3', city: 'spb', user_id: 3)
Ad.create(title: 'test3', description: 'desc3', city: 'spb', user_id: 2)
Ad.create(title: 'test2', description: 'desc2', city: 'spb', user_id: 2)
Ad.all
Ad.create(title: 'test1', description: 'desc1', city: 'msc', user_id: 1)
Ad.create(title: 'test1', description: 'desc1', city: 'msc')
Ad.create(title: 'test1', description: 'desc1')
Ad.create(title: 'test1')
Ad.create
Ad.all
c
Ad.all
Ad
c
n
f
n
APP_ROOT
f
c
Models
Modele
Model
model
models
Ads
::Ads
c
::Ads
Ads
c
Ads.all
c
Ads.all
AdSerializer
c
::AdSerializer
serializers
serializer
serializers
::Serializers
Serializers
AdSerializer
c
AdSerializer
